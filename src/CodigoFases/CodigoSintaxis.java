
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CodigoFases;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CodigoSintaxis extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CodigoSintaxis() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CodigoSintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CodigoSintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\005\003\000\002\006\006\000\002\007\015" +
    "\000\002\010\007\000\002\011\005\000\002\012\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\004\007\001\002\000\004\007\ufffe\001" +
    "\002\000\004\002\046\001\002\000\004\002\000\001\002" +
    "\000\004\051\043\001\002\000\004\007\012\001\002\000" +
    "\004\002\uffff\001\002\000\004\017\013\001\002\000\004" +
    "\015\014\001\002\000\004\046\015\001\002\000\004\047" +
    "\016\001\002\000\004\050\017\001\002\000\004\054\020" +
    "\001\002\000\004\014\031\001\002\000\004\054\022\001" +
    "\002\000\004\012\027\001\002\000\004\011\024\001\002" +
    "\000\004\053\025\001\002\000\004\045\026\001\002\000" +
    "\004\002\ufffc\001\002\000\004\050\030\001\002\000\004" +
    "\011\ufffa\001\002\000\004\050\032\001\002\000\004\054" +
    "\033\001\002\000\010\016\040\017\034\022\037\001\002" +
    "\000\004\052\ufff8\001\002\000\004\054\ufffb\001\002\000" +
    "\004\052\041\001\002\000\004\052\ufff6\001\002\000\004" +
    "\052\ufff7\001\002\000\004\045\042\001\002\000\004\054" +
    "\ufff9\001\002\000\004\052\044\001\002\000\004\051\045" +
    "\001\002\000\004\007\ufffd\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\012\002\004\003\005\005\007\006\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\020\001" +
    "\001\000\002\001\001\000\004\011\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\034\013" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CodigoSintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CodigoSintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CodigoSintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CodigoSintaxis$actions {
  private final CodigoSintaxis parser;

  /** Constructor */
  CUP$CodigoSintaxis$actions(CodigoSintaxis parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CodigoSintaxis$do_action_part00000000(
    int                        CUP$CodigoSintaxis$act_num,
    java_cup.runtime.lr_parser CUP$CodigoSintaxis$parser,
    java.util.Stack            CUP$CodigoSintaxis$stack,
    int                        CUP$CodigoSintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CodigoSintaxis$result;

      /* select the action based on the action number */
      switch (CUP$CodigoSintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= GLOBAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)).value;
		RESULT = start_val;
              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CodigoSintaxis$parser.done_parsing();
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // GLOBAL ::= pr_CODIGOGLOBAL 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("GLOBAL",0, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pr_CODIGOGLOBAL ::= pr_INCLUIR expr_FNPRINCIPAL 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_CODIGOGLOBAL",1, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pr_INCLUIR ::= pr_DECLARACION_INCLUIR 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_INCLUIR",3, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pr_DECLARACION_INCLUIR ::= INCLUIR COMILLA ID COMILLA 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_DECLARACION_INCLUIR",4, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_FNPRINCIPAL ::= FUNCION NUMERO PRINCIPAL PARAB PARCE DPUNTO expr_VARIABLES expr_CODIGO RETORNAR ENTERO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_FNPRINCIPAL",5, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_VARIABLES ::= TAB VARIABLE DPUNTO TAB expr_DECLARACIONVAR 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_CODIGO ::= TAB CODIGO DPUNTO 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_CODIGO",7, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_DECLARACIONVAR ::= TIPODATO ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_DECLARACIONVAR",8, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPODATO ::= NUMERO 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("TIPODATO",9, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPODATO ::= CADENA 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("TIPODATO",9, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPODATO ::= BOLEANO 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("TIPODATO",9, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CodigoSintaxis$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CodigoSintaxis$do_action(
    int                        CUP$CodigoSintaxis$act_num,
    java_cup.runtime.lr_parser CUP$CodigoSintaxis$parser,
    java.util.Stack            CUP$CodigoSintaxis$stack,
    int                        CUP$CodigoSintaxis$top)
    throws java.lang.Exception
    {
              return CUP$CodigoSintaxis$do_action_part00000000(
                               CUP$CodigoSintaxis$act_num,
                               CUP$CodigoSintaxis$parser,
                               CUP$CodigoSintaxis$stack,
                               CUP$CodigoSintaxis$top);
    }
}

}
